package de.upb.crypto.clarc.protocols.simulator;

import de.upb.crypto.clarc.protocols.arguments.ZeroKnowledgeArgument;
import de.upb.crypto.clarc.protocols.arguments.sigma.SigmaProtocolTranscript;

/**
 * A simulator for a (perfect) zero knowledge protocol. The simulator need to interact with the (dishonest) verifier
 * to get a challenge. Since the distribution of the challenge may depend on the verifiers choice (or the used
 * announcement), it is not given in the  simulate method.
 * It is allowed to output in at most 50 % of all runs a special failure symbol, in the other cases it outputs a
 * accepting transcript.
 * The probability for seeing a special transcript generated by this simulator is equal to the probability to get the
 * transcript by the interaction of Prover and Verifier.
 */
public class ZeroKnowledgeSimulator extends Simulator<ZeroKnowledgeArgument> {

    /**
     * @param protocolInstance
     */
    public ZeroKnowledgeSimulator(ZeroKnowledgeArgument protocolInstance) {
        super(protocolInstance);
    }

    /**
     * @see Simulator#simulate()
     */
    @Override
    public SigmaProtocolTranscript simulate() {
        return null;
    }
}
